version: '3.8'

services:
  # Backend Service (Spring Boot)
  backend:
    build:
      context: ./backend
      dockerfile: dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8080
    depends_on:
      - database
    networks:
      - motorbike-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Service (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_ENV=docker
    depends_on:
      - backend
    networks:
      - motorbike-network
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
    stdin_open: true
    tty: true

  # Database (PostgreSQL)
  database:
    image: postgres:13-alpine
    environment:
      - POSTGRES_DB=motorbike_sharing
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin123
    ports:
      - "5432:5432"
    networks:
      - motorbike-network
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d motorbike_sharing"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis (for caching and sessions)
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    networks:
      - motorbike-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # Dashboard Service (Python Flask)
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    ports:
      - "5000:5000"
    networks:
      - motorbike-network
    restart: unless-stopped
    volumes:
      - .:/app
      - ./logs:/app/logs
    depends_on:
      - backend
      - frontend

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    networks:
      - motorbike-network
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
      - dashboard

networks:
  motorbike-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: